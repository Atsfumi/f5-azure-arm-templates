{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "5.5.0.0", 
    "parameters": {
        "adminUsername": {
            "defaultValue": "azureuser", 
            "metadata": {
                "description": "User name for the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "adminPassword": {
            "metadata": {
                "description": "Password to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details."
            }, 
            "type": "securestring"
        }, 
        "vmRoleName": {
            "defaultValue": "Contributor",
            "metadata": {
                "description": "Name of the Azure Active Directory Role to assign to the Managed Identity attached to the Virtual Machines."
            }, 
            "type": "string"
        },
        "masterKey": {
            "metadata": {
                "description": "Specify BIG-IQ master Key."
            }, 
            "type": "securestring"
        }, 
        "dnsLabel": {
            "defaultValue": "", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceName": {
            "defaultValue": "f5vm01", 
            "metadata": {
                "description": "Name of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_D4s_v3",
                "Standard_D2s_v3",
                "Standard_D8s_v3"
            ], 
            "defaultValue": "Standard_D2s_v3", 
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            }, 
            "type": "string"
        },
        "bigIqVersion": {
            "allowedValues": [
                "6.0.100813"
            ],
            "defaultValue": "6.0.100813",
            "metadata": {
                "description": "F5 BIG-IQ version you want to use."
            },
            "type": "string"
        }, 
        "bigIqLicenseKey1": {
            "defaultValue": "", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            }, 
            "type": "string"
        }, 
        "bigIqLicenseKey2": {
            "defaultValue": "", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            }, 
            "type": "string"
        },
        "licensePoolKeys": {
            "defaultValue": "Do_Not_Create",
            "metadata": {
                "description": "Enter a pool name and registration key using the format of name:key. Leave Do_Not_Create if you do not want to create a licensing pool on BIG-IQ at this time."
            },
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
        },
        "regPoolKeys": {
            "defaultValue": "Do_Not_Create",
            "metadata": {
                "description": "Enter a pool name and a list of individual BIG-IP registration keys in the format of name:key,key,key. Leave Do_Not_Create if you do not want to create a reg key pool on BIG-IQ at this time."
            },
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
        },         
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
            }, 
            "type": "string"
        }, 
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
            }, 
            "type": "string"
        }, 
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "mgmtIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the management self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
            }, 
            "type": "string"
        }, 
        "internalSubnetName": {
            "metadata": {
                "description": "Name of the existing internal subnet - with external access to Internet. **Important**: The subnet you provide for the internal NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "internalIpSelfAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the internal self IP (primary) of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
            }, 
            "type": "string"
        }, 
        "internalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address (secondary) you would like to assign to the first shared Azure public IP. An additional private IP address will be assigned for each public IP address you specified in numberOfInternalIps.  For example, inputting 10.100.1.50 here and choosing 2 in numberOfInternalIps would result in 10.100.1.50 and 10.100.1.51 being configured as static private IP addresses for internal virtual servers."
            }, 
            "type": "string"
        },
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org", 
            "metadata": {
                "description": "Leave the default NTP server the BIG-IP uses, or replace the default NTP server with the one you want to use."
            }, 
            "type": "string"
        }, 
        "timeZone": {
            "defaultValue": "UTC", 
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IP uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo (see the full list [here](https://github.com/F5Networks/f5-azure-arm-templates/blob/master/azure-timezone-list.md)). Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            }, 
            "type": "string"
        }, 
        "customImage": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }, 
            "type": "object"
        }, 
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes", 
                "No"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            }, 
            "type": "string"
        }
    }, 
    "variables": {
        "imageNameSub": "f5-bigiq-virtual-edition-byol", 
        "computeApiVersion": "2017-12-01", 
        "networkApiVersion": "2017-11-01", 
        "storageApiVersion": "2017-10-01", 
        "location": "[resourceGroup().location]", 
        "adminPassword": "[replace(parameters('adminPassword'),'\\n', '\n')]", 
        "subscriptionID": "[subscription().subscriptionId]", 
        "resourceGroupName": "[resourceGroup().name]", 
        "singleQuote": "'", 
        "f5CloudLibsTag": "v4.5.1", 
        "f5CloudLibsAzureTag": "v2.5.0", 
        "f5NetworksTag": "v5.5.0.0", 
        "f5CloudIappsTag": "v2.2.0", 
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 2481d285c33b97ed083f6e48edcfbd1d5f8fb1dea0578f429017706a1829d3625fab6aff8f55fe71b2b5929410110043a17d57179d833f0f51c90fb0f6ff292d\n            set hashes(f5-cloud-libs-aws.tar.gz) 35361a507a4ef0c8f5205c05d913dbea024f287777e86dccd0c345560a637c106aeab4150af9eafd828929eb7798184e076ea5359e16b4c2d5544cc380800711\n            set hashes(f5-cloud-libs-azure.tar.gz) def8780b308a7cfea52d524e5ad07121e7091ecb826e01c87bc758c90fee5c25d12a2a4a06dc78ff64cb478a471f8514bde2cd5da19fb427de28598272a978bb\n            set hashes(f5-cloud-libs-gce.tar.gz) 9d0d8c32909a272cc9a56dad60121916830462ba26c9bb1d731c10f4e33ba7a856520db55016097db2043e27d048027924470a8e68f366de0339a43b7b68b0d6\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 01dc84d4a4be2bc484ab57b771f186f87d4b664e1fb9a073e025b5362ee14d712b970eef4041f794f66286fb1429418aab16e832c89df8a25e02229c68b83de8\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature rDemf/H1eVNT9zqev0rGMqJMAsDqmxZOsgwl7LuxD0bocfXqCnZyIt5B6e1nAFWJRwI2m4uKeknO58YAoNJo/+HvoG+4ifoAT71d5f0o2JX13kbvb4qEJAdl0nkGjy2j62CeHSl40+XimWzCBn8FA3bFOhfP6kfs/gAo7OhokBbk4YTxa1Y16hI5rf5Z9fS78/Km2Fs55XU18KKwL81lWyA/6by46V2LvmGYc461j8yFGLsaJLOsgJ6HZQBKRyH1ZrVAA5mdqOU7i9P1VsRgvgLhE/WBraHIDz5olowiq5AfiqnRG//Z6Wn4QgZONn4IGPMViPq+f2NxrDHlirfy/A==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5.service_discovery.tmpl f5.cloud_logger.v1.0.0.tmpl ${config_loc}f5-cloud-libs-azure.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xfz /config/cloud/f5-cloud-libs.tar.gz --warning=no-unknown-keyword -C /config/cloud/azure/node_modules/@f5devcentral\ntar xfz /config/cloud/f5-cloud-libs-azure.tar.gz --warning=no-unknown-keyword -C /config/cloud/azure/node_modules/@f5devcentral\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "skuToUse": "f5-bigiq-virtual-edition-byol", 
        "offerToUse": "f5-big-iq",
        "bigIqVersion": "6.0.101000", 
        "imagePlan": {
            "name": "[variables('skuToUse')]", 
            "product": "[variables('offerToUse')]", 
            "publisher": "f5-networks"
        }, 
        "imageReference": {
            "offer": "[variables('offerToUse')]", 
            "publisher": "f5-networks", 
            "sku": "[variables('skuToUse')]", 
            "version": "[variables('bigIqVersion')]"
        }, 
        "bigIpMgmtPort": "443", 
        "instanceName": "[toLower(parameters('instanceName'))]", 
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "virtualNetworkName": "[parameters('vnetName')]", 
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]", 
        "publicIPAddressType": "Static", 
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]", 
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]", 
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]", 
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]", 
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]", 
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]", 
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]", 
        "mgmtSubnetPrivateAddressPrefixArray": "[split(parameters('mgmtIpAddressRangeStart'), '.')]", 
        "mgmtSubnetPrivateAddressPrefix": "[concat(variables('mgmtSubnetPrivateAddressPrefixArray')[0], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[1], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "mgmtSubnetPrivateAddressSuffixInt": "[int(variables('mgmtSubnetPrivateAddressPrefixArray')[3])]", 
        "mgmtSubnetPrivateAddressSuffix": "[add(variables('mgmtSubnetPrivateAddressSuffixInt'), 1)]", 
        "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddressRangeStart')]", 
        "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), variables('mgmtSubnetPrivateAddressSuffix'))]", 
        "intSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]", 
        "intSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('intSelfPublicIpAddressNamePrefix'))]", 
        "intpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-int-pip')]", 
        "intPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('intPublicIPAddressNamePrefix'))]", 
        "intNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-int-nsg'))]", 
        "intNicName": "[concat(variables('dnsLabel'), '-int')]", 
        "intSubnetName": "[parameters('internalSubnetName')]", 
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]", 
        "intSubnetSelfPrivateAddressPrefixArray": "[split(parameters('internalIpSelfAddressRangeStart'), '.')]", 
        "intSubnetSelfPrivateAddressPrefix": "[concat(variables('intSubnetSelfPrivateAddressPrefixArray')[0], '.', variables('intSubnetSelfPrivateAddressPrefixArray')[1], '.', variables('intSubnetSelfPrivateAddressPrefixArray')[2], '.')]", 
        "intSubnetSelfPrivateAddressSuffixInt": "[int(variables('intSubnetSelfPrivateAddressPrefixArray')[3])]", 
        "intSubnetSelfPrivateAddressSuffix": "[add(variables('intSubnetSelfPrivateAddressSuffixInt'), 1)]", 
        "intSubnetPrivateAddress": "[parameters('internalIpSelfAddressRangeStart')]", 
        "intSubnetPrivateAddress1": "[concat(variables('intSubnetSelfPrivateAddressPrefix'), variables('intSubnetSelfPrivateAddressSuffix'))]", 
        "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]", 
        "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]", 
        "intSubnetPrivateAddressSuffix0": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]", 
        "intSubnetPrivateAddressSuffix1": "[add(variables('intSubnetPrivateAddressSuffixInt'), 2)]", 
        "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]", 
        "addtlNicName": "[concat(variables('dnsLabel'), '-addtlnic')]", 
        "addtlNicFillerArray": [
            "filler01", 
            "filler02", 
            "filler03", 
            "filler04", 
            "filler05"
        ], 
        "numberOfinternalIps": 1, 
        "mgmtRouteGw": "`tmsh list sys management-route default gateway | grep gateway | sed 's/gateway //;s/ //g'`", 
        "routeCmdArray": {
            "12.1.303000": "[concat('tmsh create sys management-route waagent_route network 168.63.129.16/32 gateway ', variables('mgmtRouteGw'), '; tmsh save sys config')]", 
            "13.1.100000": "route", 
            "latest": "route"
        }, 
        "selfNicConfigArray": {
            "0": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '0'))]", 
                    "properties": {
                        "primary": true
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '0'))]", 
                    "properties": {
                        "primary": false
                    }
                } 
            ], 
            "1": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '1'))]", 
                    "properties": {
                        "primary": true
                    }
                }, 
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '1'))]", 
                    "properties": {
                        "primary": false
                    }
                }
            ]
        }, 
        "addtlNicConfigArray": {
            "copy": [
                {
                    "count": 5, 
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values0', 1), '0'))]", 
                        "properties": {
                            "primary": false
                        }
                    }, 
                    "name": "values0"
                }, 
                {
                    "count": 5, 
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values1', 1), '1'))]", 
                        "properties": {
                            "primary": false
                        }
                    }, 
                    "name": "values1"
                }
            ]
        }, 
        "failoverCmdArray": {
            "12.1.303000": "echo \"Failover db variable not required.\"", 
            "13.1.100000": "tmsh modify sys db failover.selinuxallowscripts value enable", 
            "latest": "tmsh modify sys db failover.selinuxallowscripts value enable"
        }, 
        "tagValues": "[parameters('tagValues')]", 
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]", 
        "dataStorageAccountType": "Standard_LRS", 
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]", 
        "allowUsageAnalytics": {
            "No": {
                "hashCmd": "echo AllowUsageAnalytics:No", 
                "metricsCmd": ""
            }, 
            "Yes": {
                "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]", 
                "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:failover-api-existing-stack-experimental,templateVersion:5.5.0.0,region:', variables('location'), ',bigIqVersion:', variables('bigIqVersion') ,',licenseType:byol,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
            }
        }, 
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]", 
        "useCustomImage": "[not(empty(variables('customImage')))]", 
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]", 
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]", 
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            }, 
            "platformImage": {
                "imageReference": "[variables('imageReference')]", 
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        }, 
        "premiumInstanceArray": [
            "Standard_DS2", 
            "Standard_DS3", 
            "Standard_DS4", 
            "Standard_DS11", 
            "Standard_DS12", 
            "Standard_DS13", 
            "Standard_DS14", 
            "Standard_DS2_v2", 
            "Standard_DS3_v2", 
            "Standard_DS4_v2", 
            "Standard_DS5_v2", 
            "Standard_DS11_v2", 
            "Standard_DS12_v2", 
            "Standard_DS13_v2", 
            "Standard_DS14_v2", 
            "Standard_DS15_v2", 
            "Standard_F2S", 
            "Standard_F4S", 
            "Standard_F8S", 
            "Standard_F16S", 
            "Standard_GS2", 
            "Standard_GS3", 
            "Standard_GS4", 
            "Standard_GS5"
        ],
        "initScript": "IyEvYmluL2Jhc2gKCiMjIyBDb25maWd1cmUgZGVmYXVsdCB2YWx1ZXMKbG9nX2xldmVsPSJpbmZvIgpoZWxwPWZhbHNlCnNraXBfdmVyaWZ5PWZhbHNlCnNjcmlwdF9kaXI9JChkaXJuYW1lICQwKQoKClRNU0g9L3Vzci9iaW4vdG1zaApDVVJMPS91c3IvYmluL2N1cmwKTk9ERT0vdXNyL2Jpbi9ub2RlCk1LRElSPS9iaW4vbWtkaXIKTU9VTlQ9L2Jpbi9tb3VudApSTURJUj0vYmluL3JtZGlyClVNT1VOVD0vYmluL3Vtb3VudAoKIyMjIEZ1bmN0aW9ucyAtIFRoZXNlIHNob3VsZCBnbyBpbnRvIHNlcGVyYXRlIGZpbGUocykKIyB1c2FnZTogbG9nIG1lc3NhZ2UKZnVuY3Rpb24gbG9nKCkgewogICAgZWNobyAiJChkYXRlICcrJVktJW0tJWRUJUg6JU06JVNaJyk6ICQxIgp9CiMgdXNhZ2U6IGdldF92ZXJzaW9uCmZ1bmN0aW9uIGdldF92ZXJzaW9uKCkgewogICAgcmV0PSQoJFRNU0ggc2hvdyBzeXMgdmVyc2lvbiB8IGdyZXAgLWkgcHJvZHVjdCB8IGF3ayAne3ByaW50ICQyfScpCiAgICBlY2hvICR7cmV0LCx9Cn0KIyB1c2FnZToganNvbmlmeSBrZXk6dmFsdWUsa2V5MTp2YWx1ZTEKZnVuY3Rpb24ganNvbmlmeSgpIHsKICAgIGxpc3Q9JChlY2hvICQxIHwgdHIgJywnICcgJykKICAgIGpzb249J3t9JwogICAgZm9yIGkgaW4gJGxpc3QgOyBkbwogICAgICAgIGt2PSgkKGVjaG8gJGkgfCB0ciAnOicgJyAnKSkKICAgICAgICBqc29uPSQoZWNobyAkanNvbiB8IGpxIC0tYXJnIGsgJHtrdlswXX0gLS1hcmcgdiAke2t2WzFdfSAnLiB8IC5bJGtdPSR2JykKICAgIGRvbmUKICAgIGVjaG8gJGpzb24KfQojIHVzYWdlOiBnZXRfdmFsIGpzb25fb2JqZWN0IGtleQpmdW5jdGlvbiBnZXRfdmFsKCkgewogICAgcmV0PSQoZWNobyAkMSB8IGpxIC4kMiAtcikKICAgIGVjaG8gJHJldAp9CiMgdXNhZ2U6IG1ha2Ugc3VyZSB0aGVyZSBpcyBpbnRlcm5ldCBjb25uZWN0aW9uIHRvIEdpdEh1YgpmdW5jdGlvbiBjaGVja19pbnRlcm5ldF9jb25uZWN0aW9uIHsKICAgIGVjaG8gIi0tLSBDaGVja2luZyBHaXRodWIgc3RhdHVzIC0tLSIKICAgIGNoZWNrcz0wCiAgICBnaXRodWJfcmVzcG9uc2U9ImJhZCIKICAgIHdoaWxlIFsgJGNoZWNrcyAtbHQgMTIwIF0gOyBkbwogICAgICAgIGdpdGh1Yl9yZXNwb25zZT1gY3VybCBodHRwczovL3N0YXR1cy5naXRodWIuY29tL2FwaS9zdGF0dXMuanNvbj9jYWxsYmFjay1hcGlTdGF0dXMgfCBqcSAuc3RhdHVzIC0tcmF3LW91dHB1dGAKICAgICAgICBpZiBbICRnaXRodWJfcmVzcG9uc2UgPT0gImdvb2QiIF07IHRoZW4KICAgICAgICAgICAgbG9nICJHaXRIdWIgaXMgcmVhZHkiCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgICAgICBsb2cgIkdpdEh1YiBub3QgcmVhZHk6ICRjaGVja3MiCiAgICAgICAgbGV0IGNoZWNrcz1jaGVja3MrMQogICAgICAgIHNsZWVwIDUKICAgIGRvbmUKICAgIGlmIFsgJGdpdGh1Yl9yZXNwb25zZSA9PSAiYmFkIiBdOyB0aGVuCiAgICAgICAgbG9nICJObyBHaXRIdWIgaW50ZXJuZXQgY29ubmVjdGlvbi4iCiAgICAgICAgZXhpdAogICAgZmkKfQojIHVzYWdlOiBtY3BfcnVubmluZwpmdW5jdGlvbiBtY3BfcnVubmluZyB7CiAgICBjaGVja3M9MAogICAgd2hpbGUgWyAkY2hlY2tzIC1sdCAxMjAgXSA7IGRvCiAgICAgICAgJFRNU0ggLWEgc2hvdyBzeXMgbWNwLXN0YXRlIGZpZWxkLWZtdCB8IGdyZXAgLXEgcnVubmluZwogICAgICAgIGlmIFsgJD8gPT0gMCBdOyB0aGVuCiAgICAgICAgICAgIGxvZyAiTUNQRCByZWFkeSIKICAgICAgICAgICAgYnJlYWsKICAgICAgICBmaQogICAgICAgIGxvZyAiTUNQRCBub3QgcmVhZHk6ICRjaGVja3MiCiAgICAgICAgbGV0IGNoZWNrcz1jaGVja3MrMQogICAgICAgIHNsZWVwIDUKICAgIGRvbmUKfQojIHVzYWdlOiBEb3dubG9hZCBmcm9tIEdpdGh1YiB1bnRpbCBzdWNjZXNzZnVsCiMKIyAkMTogb3V0cHV0IGZpbGUgbmFtZQojICQyOiBVUkwKZnVuY3Rpb24gc2FmZV9kb3dubG9hZCB7CiAgICBjaGVja3M9MAogICAgd2hpbGUgWyAkY2hlY2tzIC1sdCAxMjAgXSA7IGRvCiAgICAgICAgJENVUkwgLS1mYWlsIC0tcmV0cnkgMjAgLS1yZXRyeS1kZWxheSA1IC0tcmV0cnktbWF4LXRpbWUgMjQwIC1vICQxICQyICYmIGJyZWFrCiAgICAgICAgbGV0IGNoZWNrcz1jaGVja3MrMQogICAgICAgIHNsZWVwIDUKICAgIGRvbmUKfQojIHVzYWdlOiBiYXNlX2NvbmZpZ19hdmFpbGFibGUgLSByZXNvbHZlcyBpc3N1ZSBmb3VuZCBpbiA2LjAuMCB2ZXJzaW9ucyBvZiBiaWctaXEKZnVuY3Rpb24gYmFzZV9jb25maWdfYXZhaWxhYmxlIHsKICAgIGNoZWNrcz0wCiAgICB3aGlsZSBbICRjaGVja3MgLWx0IDEyMCBdIDsgZG8KICAgICAgICAkVE1TSCAtYSBzaG93IHN5cyBtY3Atc3RhdGUgZmllbGQtZm10IHwgZ3JlcCAtcSBydW5uaW5nCiAgICAgICAgaWYgWyAtZiAvY29uZmlnL2JpZ2lwX2Jhc2UuY29uZiBdOyB0aGVuCiAgICAgICAgICAgIGxvZyAiQmFzZSBDb25maWcgZmlsZSBwcmVzZW50OyBzYXZpbmcgY29uZmlnIgogICAgICAgICAgICB0bXNoIHNhdmUgc3lzIGNvbmZpZwogICAgICAgICAgICBjYXQgL2NvbmZpZy9iaWdpcF9iYXNlLmNvbmYKICAgICAgICAgICAgYnJlYWsKICAgICAgICBmaQogICAgICAgIGxvZyAiQmFzZSBjb25maWcgZmlsZSBub3QgeWV0IHByZXNlbnQ6ICRjaGVja3MiCiAgICAgICAgbGV0IGNoZWNrcz1jaGVja3MrMQogICAgICAgIHNsZWVwIDUKICAgIGRvbmUKfQojIHVzYWdlOiBnZXRfbmV0X2luZm8gZXRoMCBuc3xndyBpbmNsdWRlX2NpZHIKZnVuY3Rpb24gZ2V0X25ldF9pbmZvKCkgewogICAgUkVUPSIiCiAgICBDSURSX0JMT0NLPSIiCiAgICBpZiBbWyAkY2xvdWQgPT0gImF6dXJlIiBdXTsgdGhlbgogICAgICAgIGFkZF9pbnQ9MQogICAgICAgIElGX01BQz0kKGlmY29uZmlnICQxIHwgZ3JlcCAtaSBod2FkZHIgfCBhd2sgJ3twcmludCAkNX0nIHwgc2VkICdzLzovL2cnKQogICAgICAgIElGX0lORk89JChjdXJsIC1zZiAtLXJldHJ5IDIwIGN1cmwgLUggTWV0YWRhdGE6dHJ1ZSAiaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9tZXRhZGF0YS9pbnN0YW5jZS9uZXR3b3JrL2ludGVyZmFjZT9hcGktdmVyc2lvbj0yMDE3LTA4LTAxIiB8IGpxICcuW10gfCBzZWxlY3QoLm1hY0FkZHJlc3M9PSInJHtJRl9NQUN9JyIpJykKICAgICAgICBDSURSX0JMT0NLPSQoZWNobyAke0lGX0lORk99IHwganEgLmlwdjQuc3VibmV0WzBdLmFkZHJlc3MgLS1yYXctb3V0cHV0KQogICAgICAgIENJRFJfQkxPQ0srPSIvIgogICAgICAgIENJRFJfQkxPQ0srPSQoZWNobyAke0lGX0lORk99IHwganEgLmlwdjQuc3VibmV0WzBdLnByZWZpeCAtLXJhdy1vdXRwdXQpCiAgICBlbGlmIFtbICRjbG91ZCA9PSAiYXdzIiBdXTsgdGhlbgogICAgICAgIGNpZHJfYmxvY2tfdXJpPSJ2cGMtaXB2NC1jaWRyLWJsb2NrIgogICAgICAgIGFkZF9pbnQ9MgogICAgICAgICMgSWYgZ2V0dGluZyBnYXRld2F5LCB1cGRhdGUgbmVjZXNzYXJ5IHZhcnMKICAgICAgICBpZiBbWyAkMiA9PSAiZ3ciIF1dIDsgdGhlbiBjaWRyX2Jsb2NrX3VyaT0ic3VibmV0LWlwdjQtY2lkci1ibG9jayIgOyBhZGRfaW50PTEgOyBmaQogICAgICAgIElGX01BQz0kKGlmY29uZmlnICQxIHwgZ3JlcCAtaSBod2FkZHIgfCBhd2sgJ3twcmludCB0b2xvd2VyKCQ1KX0nKQogICAgICAgIENJRFJfQkxPQ0s9JChjdXJsIC1zZiAtLXJldHJ5IDIwIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9uZXR3b3JrL2ludGVyZmFjZXMvbWFjcy8ke0lGX01BQ30vJHtjaWRyX2Jsb2NrX3VyaX0pCiAgICBmaQogICAgUkVUPSQoZWNobyAke0NJRFJfQkxPQ0slLyp9IHwgYXdrIC1GLiAneyBwcmludGYgIiVkLiVkLiVkLiVkIiwgJDEsICQyLCAkMywgJDQrJyR7YWRkX2ludH0nIH0nKQogICAgIyBJbmNsdWRlIG1hc2sgaW4gcmVzcG9uc2UgaWYgcmVxdWVzdGVkCiAgICBpZiBbWyAtbiAiJDMiIF1dIDsgdGhlbiBlY2hvICR7UkVUfS8ke0NJRFJfQkxPQ0sjKi99IDsgZWxzZSBlY2hvICRSRVQgOyBmaQp9CiMgY3JlYXRlcyBhIGRpcmVjdG9yeSBmb3IgaW4tbWVtb3J5IGZpbGVzCiMgdXNhZ2U6IGNyZWF0ZV90ZW1wX2RpciBuYW1lIHNpemUKZnVuY3Rpb24gY3JlYXRlX3RlbXBfZGlyKCkgewogICAgJE1LRElSICIkMSIKICAgICRNT1VOVCAtdCB0bXBmcyAtbyBzaXplPSIkMiIsbW9kZT0xNzAwIHRtcGZzICIkMSIKfQojIHVzYWdlOiByZW1vdmVfdGVtcF9kaXIgbmFtZQpmdW5jdGlvbiByZW1vdmVfdGVtcF9kaXIoKSB7CiAgICAkVU1PVU5UICIkMSIKICAgICRSTURJUiAiJDEiCn0KIyB1c2FnZTogd2lwZV90ZW1wX2RpciBuYW1lCmZ1bmN0aW9uIHdpcGVfdGVtcF9kaXIoKSB7CiAgICBGSUxFUz0kKGxzIC0xICIkMSIpCgogICAgZm9yIGYgaW4gJEZJTEVTOyBkbwogICAgICAgIHNocmVkIC0tcmVtb3ZlICIkezF9LyR7Zn0iCiAgICBkb25lCgogICAgcmVtb3ZlX3RlbXBfZGlyICIkMSIKfQoKcmVhZCAtciAtZCAnJyBVU0FHRSA8PCBFT00KICAgIFVzYWdlOiAkMAogICAgICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICBQcmludCB1c2FnZSBtZXNzYWdlIGFuZCBleGl0CiAgICAgICAgLS1sb2ctbGV2ZWwgPHN0cmluZz4gICAgICAgIExldmVsIG9mIGxvZ2dpbmcgZGVzaXJlZDogZXJyb3IsIHdhcm4sIGluZm8sIGRlYnVnCiAgICAgICAgLS1jbG91ZCA8c3RyaW5nPiAgICAgICAgICAgIENsb3VkIGVudmlyb25tZW50IGV4ZWN1dGVkIGFnYWluc3Q6IGF3cwogICAgICAgIC0tc2tpcC12ZXJpZnkgPHN0cmluZz4gICAgICBTa2lwIHZlcmlmaWNhdGlvbiBvZiBkZXBlbmRlbmNpZXMKICAgICAgICAtLWxpY2Vuc2UgPHN0cmluZz4gICAgICAgICAgTGljZW5zZSBmb3IgdGhlIGRldmljZQogICAgICAgIC0tbnRwIDxzdHJpbmc+ICAgICAgICAgICAgICBOVFAgZm9yIHRoZSBkZXZpY2UKICAgICAgICAtLXRpbWV6b25lIDxzdHJpbmc+ICAgICAgICAgVGltZXpvbmUgZm9yIHRoZSBkZXZpY2UKICAgICAgICAtLWRhdGEtaW50ZXJmYWNlIDxzdHJpbmc+ICAgUHJpbWFyeSBpbnRlcmZhY2UgdG8gdXNlIGZvciBkYXRhLXBsYW5lCiAgICAgICAgLS12bGFuIDxzdHJpbmc+ICAgICAgICAgICAgIFZMQU4ocykgdG8gY3JlYXRlIG9uIHRoZSBkZXZpY2UgKDsgZm9yIG11bHRpcGxlKSAnbjpleHQsbmljOjEuMScKICAgICAgICAtLXNlbGYtaXAgPHN0cmluZz4gICAgICAgICAgU2VsZiBJUChzKSB0byBjcmVhdGUgb24gdGhlIGRldmljZSAoOyBmb3IgbXVsdGlwbGUpOiAnbjpleHQsYTp4LngueC54LHY6ZXh0LGk6ZXRoMScKICAgICAgICAtLXVzYWdlLWFuYWx5dGljcyA8c3RyaW5nPiAgVXNhZ2UgYW5hbHl0aWNzIHRvIHNlbmQ6ICdjTjp2YWwscjp2YWwsY0k6dmFsLGRJOnZhbCxsVDp2YWwsYklWOnZhbCx0Tjp2YWwsdFY6dmFsLHNlbmQ6eWVzJwogICAgICAgIC0tY3JlYXRlLWxpY2Vuc2UtcG9vbCAgICAgICBDcmVhdGVzIGxpY2Vuc2UgcG9vbCwgc2VuZDogbmFtZTpyZWdfa2V5CiAgICAgICAgLS1jcmVhdGUtcmVnLWtleS1wb29sICAgICAgIENyZWF0ZXMgYSByZWdrZXkgcG9vbCwgc2VuZDogbmFtZTpyZWdfa2V5X2xpc3QKICAgICAgICAtLWZjbC10YWcgICAgICAgICAgICAgICAgICAgRjUgY2xvdWQgbGliIHRhZyB0byBkb3dubG9hZCBmNS1jbG91ZC1saWJzLnRhci5negogICAgICAgIC0tZmNsLWNsb3VkLXRhZyAgICAgICAgICAgICBGNSBzcGVjaWZpZWQgY2xvdWQgdGFnIHRvIGRvd25sb2FkIGY1LWNsb3VkLWxpYnMtPGNsb3VkPi50YXIuZ3oKICAgICAgICAtLWJpZy1pcS1wYXNzd29yZCAgICAgICAgICAgQmlnaXEgcGFzc3dvcmQsIHVzZWQgdG8gb25ib2FyZCBiaWdpcSBjbHVzdGVycwogICAgICAgIC0tYmlnLWlxLW1hc3Rlci1rZXkgICAgICAgICBCaWctSVEgbWFzdGVya2V5IHVzZWQgZHVyaW5nIGluaXRpdGlhbCBjb25maWd1cmFpdG9uCiAgICAgICAgLS1iaWctaXEtcGFzc3dvcmQtZGF0YS11cmkgIFVSSSB0byB0aGUgbG9jYXRpb24gdGhhdCBjb250YWlucyBCSUctSVEgYWRtaW4gdXNlciBwYXNzd29yZAogICAgICAgIC0tbWFzdGVyICAgICAgICAgICAgICAgICAgICBJbmRpY2F0ZXMgdGhhdCB0aGlzIGluc3RhbmNlIGlzIG1hc3RlciAodXNlZCBpbiBCSUctSVEgY2x1c3RlcmluZykgdXNlIHdpdGggLS1iaWctaXEtZmFpbG92ZXItcGVlci1pcCBvcHRpb24KICAgICAgICAtLWJpZy1pcS1mYWlsb3Zlci1wZWVyLWlwICAgVGhpcyBpcyB0aGUgcHJpdmF0ZSBJUCBhZGRyZXNzIGZvciB0aGUgc2Vjb25kYXJ5IEJJRy1JUQoKRU9NCgojIyMgUGFyc2UgY29tbWFuZCBsaW5lIGFyZ3VtZW50cwp3aGlsZSBbWyAkIyAtZ3QgMCBdXSA7IGRvCiAgICBjYXNlICIkMSIgaW4KICAgICAgICAtLWhlbHApCiAgICAgICAgICAgIGhlbHA9dHJ1ZQogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tbG9nLWxldmVsKQogICAgICAgICAgICBsb2dfbGV2ZWw9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jbG91ZCkKICAgICAgICAgICAgY2xvdWQ9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1za2lwLXZlcmlmeSkKICAgICAgICAgICAgc2tpcF92ZXJpZnk9dHJ1ZQogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tbGljZW5zZSkKICAgICAgICAgICAgbGljZW5zZT0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLW50cCkKICAgICAgICAgICAgbnRwPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tdGltZXpvbmUpCiAgICAgICAgICAgIHRpbWV6b25lPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tZGF0YS1pbnRlcmZhY2UpCiAgICAgICAgICAgIGRhdGFfaW50ZXJmYWNlPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tdXNhZ2UtYW5hbHl0aWNzKQogICAgICAgICAgICB1c2FnZV9hbmFseXRpY3M9IiQyIgogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tdmxhbikKICAgICAgICAgICAgdmxhbj0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLXNlbGYtaXApCiAgICAgICAgICAgIHNlbGZfaXA9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1kaXNjb3ZlcnktYWRkcmVzcykKICAgICAgICAgICAgZGlzY292ZXJ5X2FkZHJlc3M9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jcmVhdGUtbGljZW5zZS1wb29sKQogICAgICAgICAgICBsaWNlbnNlX3Bvb2w9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jcmVhdGUtcmVnLWtleS1wb29sKQogICAgICAgICAgICByZWdfa2V5X3Bvb2w9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1mY2wtdGFnKQogICAgICAgICAgICBmY2xfdGFnPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tZmNsLWNsb3VkLXRhZykKICAgICAgICAgICAgZmNsX2Nsb3VkX3RhZz0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLWJpZy1pcS1wYXNzd29yZCkKICAgICAgICAgICAgYmlnaXFfcGFzc3dvcmQ9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1iaWctaXEtbWFzdGVyLWtleSkKICAgICAgICAgICAgYmlnaXFfbWFzdGVyX2tleT0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsgICAgICAgICAgICAgICAgCiAgICAgICAgLS1iaWctaXEtcGFzc3dvcmQtZGF0YS11cmkpCiAgICAgICAgICAgIHBhc3N3b3JkX2RhdGFfdXJpPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tbWFzdGVyKQogICAgICAgICAgICBtYXN0ZXI9dHJ1ZQogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tYmlnLWlxLWZhaWxvdmVyLXBlZXItaXApCiAgICAgICAgICAgIGJpZ19pcV9mYWlsb3Zlcl9wZWVyX2lwPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgICp8LS0pCiAgICAgICAgICAgIHNoaWZ0CiAgICAgICAgICAgIGJyZWFrIDs7CiAgICBlc2FjCmRvbmUKCmlmICRoZWxwIDsgdGhlbgogICAgZWNobyAiJFVTQUdFIgogICAgZXhpdApmaQoKIyBWZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVycwpyZXF1aXJlZD0oImNsb3VkIikKZm9yIGkgaW4gJHtyZXF1aXJlZFtAXX0gOyBkbwogICAgaWYgWyAteiAkeyFpfSBdIDsgdGhlbgogICAgICAgIGxvZyAiQSByZXF1aXJlZCBwYXJhbWV0ZXIgaXMgbWlzc2luZzogJGkiCiAgICAgICAgZXhpdAogICAgZmkKZG9uZQoKY29uZmlnX3BhcmFtcz0iLS1oZWxwICRoZWxwIC0tbG9nLWxldmVsICRsb2dfbGV2ZWwgLS1jbG91ZCAkY2xvdWQgLS1za2lwLXZlcmlmeSAkc2tpcF92ZXJpZnkgLS1saWNlbnNlICRsaWNlbnNlIC0tbnRwICRudHAgLS10aW1lem9uZSAkdGltZXpvbmUgIC0tZGF0YS1pbnRlcmZhY2UgJGRhdGFfaW50ZXJmYWNlIC0tdXNhZ2UtYW5hbHl0aWNzICR1c2FnZV9hbmFseXRpY3MgLS12bGFuICR2bGFuIC0tc2VsZi1pcCAkc2VsZl9pcCAtLWRpc2NvdmVyeS1hZGRyZXNzICRkaXNjb3ZlcnlfYWRkcmVzcyAtLWNyZWF0ZS1saWNlbnNlLXBvb2wgJGxpY2Vuc2VfcG9vbCAtLWNyZWF0ZS1yZWcta2V5LXBvb2wgJHJlZ19rZXlfcG9vbCAtLWZjbC10YWcgJGZjbF90YWcgLS1mY2wtY2xvdWQtdGFnICRmY2xfY2xvdWRfdGFnICIKCmlmIFsgLW4gJG1hc3RlciBdIDsgdGhlbgogICAgY29uZmlnX3BhcmFtcys9IiAtLW1hc3RlciAkbWFzdGVyICIKZmkKaWYgWyAtbiAkcGFzc3dvcmRfZGF0YV91cmkgXSA7IHRoZW4KICAgIGNvbmZpZ19wYXJhbXMrPSIgLS1iaWctaXEtcGFzc3dvcmQtZGF0YS11cmkgJHBhc3N3b3JkX2RhdGFfdXJpICIKZmkKaWYgWyAtbiAkYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXAgXSA7IHRoZW4KICAgIGNvbmZpZ19wYXJhbXMrPSIgLS1iaWctaXEtZmFpbG92ZXItcGVlci1pcCAkYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXAgIgpmaQoKZWNobyAiQ29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOiAkY29uZmlnX3BhcmFtcyIKIyBDaGVjayBmb3IgIkRvIE5vdCBDcmVhdGUiIGluIGNyZWF0ZSBwb29sIHBhcm1ldGVycwpzaG9wdCAtcyBub2Nhc2VtYXRjaAppZiBbWyAkbGljZW5zZV9wb29sID09ICJEb19Ob3RfQ3JlYXRlIiBdXSA7IHRoZW4KICAgIGxvZyAiU2V0dGluZyBsaWNlbnNpbmcgcG9vbCB0byBudWxsIGFzICdEb19Ob3RfQ3JlYXRlJyBoYXMgYmVlbiBzcGVjaWZpZWQ6ICRsaWNlbnNpbmdfcG9vbCIKICAgIGxpY2Vuc2VfcG9vbD0iIgpmaQppZiBbWyAkcmVnX2tleV9wb29sID09ICJEb19Ob3RfQ3JlYXRlIiBdXSA7IHRoZW4KICAgIGxvZyAiU2V0dGluZyByZWcga2V5IHBvb2wgdG8gbnVsbCBhcyAnRG9fTm90X0NyZWF0ZScgaGFzIGJlZW4gc3BlY2lmaWVkOiAkbGljZW5zaW5nX3Bvb2wiCiAgICByZWdfa2V5X3Bvb2w9IiIKZmkKc2hvcHQgLXUgbm9jYXNlbWF0Y2gKCiMjIyBJbnN0YWxsIGRlcGVuZGVuY2llcyAjIyMKIyMgVGhlcmUgbXVzdCBiZSBHaXRIdWIgaW50ZXJuZXQgY29ubmVjdGlvbgpjaGVja19pbnRlcm5ldF9jb25uZWN0aW9uCgpiYXNlX3VybD0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0Y1TmV0d29ya3MiCmJhc2VfZGlyPSIvY29uZmlnL2Nsb3VkIgpiYXNlX2xvZ19kaXI9Ii92YXIvbG9nL2Nsb3VkLyR7Y2xvdWR9IgpiYXNlX2RlcGVuZGVuY3lfZGlyPSIke2Jhc2VfZGlyfS8ke2Nsb3VkfS9ub2RlX21vZHVsZXMvQGY1ZGV2Y2VudHJhbCIKCiMjIERvd25sb2FkCmRlcGVuZGVuY2llcz0oIiR7YmFzZV91cmx9L2Y1LWNsb3VkLWxpYnMvJHtmY2xfdGFnfS9kaXN0L2Y1LWNsb3VkLWxpYnMudGFyLmd6IikKZGVwZW5kZW5jaWVzKz0oIiR7YmFzZV91cmx9L2Y1LWNsb3VkLWxpYnMtJHtjbG91ZH0vJHtmY2xfY2xvdWRfdGFnfS9kaXN0L2Y1LWNsb3VkLWxpYnMtJHtjbG91ZH0udGFyLmd6IikKZGVwZW5kZW5jaWVzKz0oIiR7YmFzZV91cmx9L2Y1LWNsb3VkLWxpYnMvJHtmY2xfdGFnfS9kaXN0L3ZlcmlmeUhhc2giKQoKZm9yIGkgaW4gJHtkZXBlbmRlbmNpZXNbQF19IDsgZG8KICAgIGxvZyAiRG93bmxvYWRpbmcgZGVwZW5kZW5jeTogJGkiCiAgICBmPSQoYmFzZW5hbWUgJGkpCiAgICBzYWZlX2Rvd25sb2FkICR7YmFzZV9kaXJ9LyRmICRpCiAgICAjICRDVVJMIC1rc2YgLS1yZXRyeSAxMCAtLXJldHJ5LWRlbGF5IDUgLS1yZXRyeS1tYXgtdGltZSAyNDAgLW8gJHtiYXNlX2Rpcn0vJGYgJGkKZG9uZQoKIyMgVmVyaWZ5CiMgTUNQIG11c3QgYmUgcnVubmluZyBmaXJzdAptY3BfcnVubmluZwpiYXNlX2NvbmZpZ19hdmFpbGFibGUKCmlmICEgJHNraXBfdmVyaWZ5IDsgdGhlbgogICAgdmVyaWZ5X3NjcmlwdD0iJHtiYXNlX2Rpcn0vdmVyaWZ5SGFzaCIKICAgIGlmICEgJFRNU0ggbG9hZCBzeXMgY29uZmlnIG1lcmdlIGZpbGUgJHZlcmlmeV9zY3JpcHQgOyB0aGVuCiAgICAgICAgbG9nICJDTEkgdmVyaWZpY2F0aW9uIHNjcmlwdCBpcyBub3QgdmFsaWQ6ICR2ZXJpZnlfc2NyaXB0IgogICAgICAgIGV4aXQgMQogICAgZmkKCiAgICBmb3IgaSBpbiAke2RlcGVuZGVuY2llc1tAXX0gOyBkbwogICAgICAgIGY9JChiYXNlbmFtZSAkaSkKICAgICAgICBpZiBbWyAkZiAhPSAidmVyaWZ5SGFzaCIgXV0gOyB0aGVuCiAgICAgICAgICAgIGxvZyAiVmVyaWZ5aW5nIGRlcGVuZGVuY3k6ICRmIgogICAgICAgICAgICBpZiAhICRUTVNIIHJ1biBjbGkgc2NyaXB0IHZlcmlmeUhhc2ggIi9jb25maWcvY2xvdWQvJGYiIDsgdGhlbgogICAgICAgICAgICAgICAgbG9nICJEZXBlbmRlbmN5IGlzIG5vdCB2YWxpZDogJGYiCiAgICAgICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgZmkKICAgICAgICBmaQogICAgZG9uZQplbHNlCiAgICBsb2cgIldhcm5pbmc6IFNraXBwaW5nIGRlcGVuZGVuY3kgdmVyaWZpY2F0aW9uIgpmaQoKIyMgSW5zdGFsbApta2RpciAtcCAkYmFzZV9kZXBlbmRlbmN5X2Rpcgpmb3IgaSBpbiAke2RlcGVuZGVuY2llc1tAXX0gOyBkbwogICAgZj0kKGJhc2VuYW1lICRpKQogICAgbG9nICJJbnN0YWxsaW5nIGRlcGVuZGVuY3k6ICRmIgogICAgaWYgW1sgJGYgPT0gKiIudGFyIiogXV0gOyB0aGVuCiAgICAgICAgdGFyIHhmeiAke2Jhc2VfZGlyfS8ke2Z9IC1DICRiYXNlX2RlcGVuZGVuY3lfZGlyCiAgICBmaQpkb25lCgojIyBTaWduYWwKdG91Y2ggIiR7YmFzZV9kaXJ9L2Nsb3VkTGlic1JlYWR5IgoKIyBDcmVhdGUgdG1wIGJpZy1pcSBwYXNzd29yZCBmaWxlLiBSZXF1aXJlZCBmb3IgQXp1cmUgYmlnLWlxIGNsdXN0ZXJpbmcuCmlmIFsgLW4gIiRiaWdpcV9wYXNzd29yZCIgXSA7IHRoZW4KICAgIGVjaG8gJ0NyZWF0aW5nIGJpZ2lxIHRlbXBvcmFyeSBwYXNzd29yZCBmaWxlLicKICAgIHRtcF9maWxlPScvbW50L2Nsb3VkVG1wLy5iaWdpcV9wYXNzJwogICAgdG1wX2Rpcj0kKGRpcm5hbWUgJHRtcF9maWxlKQogICAgY3JlYXRlX3RlbXBfZGlyICR0bXBfZGlyCiAgICBlY2hvICJ7IFwibWFzdGVyUGFzc3BocmFzZVwiOiBcIiR7YmlnaXFfbWFzdGVyX2tleX1cIixcInJvb3RcIjogXCIke2JpZ2lxX3Bhc3N3b3JkfVwiLFwiYWRtaW5cIjogXCIke2JpZ2lxX3Bhc3N3b3JkfVwiIH0iID4gJHRtcF9maWxlCmZpCiMjIyBQcm92aXNpb24gRGV2aWNlICMjIwpta2RpciAtcCAkYmFzZV9sb2dfZGlyCmhvc3RuYW1lPSIiCmlmIFtbICRjbG91ZCA9PSAiYXdzIiBdXTsgdGhlbgogICAgaG9zdG5hbWU9JCgkQ1VSTCAtc2YgLS1yZXRyeSAyMCBodHRwOi8vMTY5LjI1NC4xNjkuMjU0L2xhdGVzdC9tZXRhLWRhdGEvaG9zdG5hbWUpCmVsaWYgW1sgJGNsb3VkID09ICJhenVyZSIgXV07IHRoZW4KICAgIG1ldGFkYXRhPSQoJENVUkwgLUggTWV0YWRhdGE6dHJ1ZSAiaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9tZXRhZGF0YS9pbnN0YW5jZS9jb21wdXRlP2FwaS12ZXJzaW9uPTIwMTctMTItMDEiKQogICAgaG9zdG5hbWU9JChlY2hvICR7bWV0YWRhdGF9IHwganEgLm5hbWUgLS1yYXctb3V0cHV0KQogICAgaG9zdG5hbWUrPSIuIgogICAgaG9zdG5hbWUrPSQoZWNobyAke21ldGFkYXRhfSB8IGpxIC5sb2NhdGlvbiAtLXJhdy1vdXRwdXQpCiAgICBob3N0bmFtZSs9Ii5jbG91ZGFwcC5henVyZS5jb20iCmZpCmhvc3Q9ImxvY2FsaG9zdCIKc2VwYXJhdG9yPSI7IgoKIyBDb3VsZCB1c2UgYSBnZW5lcmljIC0tb25ib2FyZHwtLW5ldHdvcmt8ZXRjIGZvciBvcHRpb25hbCBhcmd1bWVudHMKIyBpbnN0ZWFkLCBhdCBsZWFzdCBmb3Igbm93IGltcGxlbWVudCB0aGUgYWRkaXRpb25hbCBhYnN0cmFjdGlvbgoKIyMgT25ib2FyZApvbmJvYXJkX2FyZ3M9IiIKaWYgWyAtbiAiJGNsb3VkIiBdIDsgdGhlbiBvbmJvYXJkX2FyZ3MrPSItLWNsb3VkICR7Y2xvdWR9ICIgOyBmaQppZiBbIC1uICIkbGljZW5zZSIgXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS1saWNlbnNlICR7bGljZW5zZX0gIiA7IGZpCmlmIFsgLW4gIiRudHAiIF0gOyB0aGVuIG9uYm9hcmRfYXJncys9Ii0tbnRwICR7bnRwfSAiIDsgZmkKaWYgWyAtbiAiJHRpbWV6b25lIiBdIDsgdGhlbiBvbmJvYXJkX2FyZ3MrPSItLXR6ICR7dGltZXpvbmV9ICIgOyBmaQppZiBbIC1uICIkbGljZW5zZV9wb29sIiBdIDsgdGhlbgogICAgIyBDaGVjayBmb3IgbXVsaXRpcGxlIGxpY2Vuc2UgcG9vbHMKICAgIE9JRlM9JElGUwogICAgSUZTPSIsIjsKICAgIGxpY2Vuc2VBcnJheT0oJGxpY2Vuc2VfcG9vbCk7CiAgICBmb3IgaSBpbiAke2xpY2Vuc2VBcnJheVtAXX07IGRvCiAgICAgICAgZmxhZz0nIC0tY3JlYXRlLWxpY2Vuc2UtcG9vbCAnCiAgICAgICAgY2F0X2FyZ3M9IiR7Y2F0X2FyZ3N9JHtmbGFnfSRpIgogICAgZG9uZQogICAgSUZTPSRPSUZTOwogICAgb25ib2FyZF9hcmdzKz0iJHtjYXRfYXJnc30gIiA7IGZpCgppZiBbIC1uICIkcmVnX2tleV9wb29sIiBdIDsgdGhlbiBvbmJvYXJkX2FyZ3MrPSItLWNyZWF0ZS1yZWcta2V5LXBvb2wgJHtyZWdfa2V5X3Bvb2x9ICIgOyBmaQoKaWYgW1sgJGNsb3VkID09ICJhd3MiIF1dOyB0aGVuCiAgICBpZiBbIC1uICIkZGF0YV9pbnRlcmZhY2UiIF0gOyB0aGVuIG9uYm9hcmRfYXJncys9Ii0tZG5zICQoZ2V0X25ldF9pbmZvICRkYXRhX2ludGVyZmFjZSBucykgIiA7IGZpCmVsaWYgW1sgJGNsb3VkID09ICJhenVyZSIgXV07IHRoZW4KICAgIGlmIFsgLW4gIiRkYXRhX2ludGVyZmFjZSIgXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS1kbnMgMTY4LjYzLjEyOS4xNiAiIDsgZmkKZmkKCmlmIFtbICIkKGdldF92ZXJzaW9uKSIgPT0gImJpZy1pcSIgJiYgLW4gIiRwYXNzd29yZF9kYXRhX3VyaSIgXV07IHRoZW4KICAgIG9uYm9hcmRfYXJncys9Ii0tYmlnLWlxLXBhc3N3b3JkLWRhdGEtdXJpICR7cGFzc3dvcmRfZGF0YV91cml9ICIKZWxpZiBbWyAiJChnZXRfdmVyc2lvbikiID09ICJiaWctaXEiIF1dOyB0aGVuCiAgICBvbmJvYXJkX2FyZ3MrPSItLXNldC1tYXN0ZXIta2V5ICIKZmkKCmlmIFsgLW4gIiR1c2FnZV9hbmFseXRpY3MiIF0gOyB0aGVuCiAgICBvPSQoanNvbmlmeSAkdXNhZ2VfYW5hbHl0aWNzKQogICAgIyBPYmZ1c2NhdGUgc2Vuc2l0aXZlIGluZm9ybWF0aW9uCiAgICBjST0kKGVjaG8gJChnZXRfdmFsICIkbyIgY0kpIHwgc2hhNTEyc3VtIHwgY3V0IC1kICIgIiAtZiAxKQogICAgZEk9JChlY2hvICQoZ2V0X3ZhbCAiJG8iIGRJKSB8IHNoYTUxMnN1bSB8IGN1dCAtZCAiICIgLWYgMSkKICAgIG1ldHJpY3MrPSJjbG91ZE5hbWU6JChnZXRfdmFsICIkbyIgY04pLHJlZ2lvbjokKGdldF92YWwgIiRvIiByKSxjdXN0b21lcklkOiR7Y0l9IgogICAgbWV0cmljcys9IixkZXBsb3ltZW50SWQ6JHtkSX0sbGljZW5zZVR5cGU6JChnZXRfdmFsICIkbyIgbFQpLGJpZ0lwVmVyc2lvbjokKGdldF92YWwgIiRvIiBiSVYpIgogICAgbWV0cmljcys9Iix0ZW1wbGF0ZU5hbWU6JChnZXRfdmFsICIkbyIgdE4pLHRlbXBsYXRlVmVyc2lvbjokKGdldF92YWwgIiRvIiB0VikgIgogICAgc2VuZF9hbmFseXRpY3M9JChnZXRfdmFsICIkbyIgc2VuZCkKICAgIGlmIFtbICIke3NlbmRfYW5hbHl0aWNzLCx9IiA9PSAieWVzIiBdXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS1tZXRyaWNzICRtZXRyaWNzICIgOyBmaQpmaQoKJE5PREUgIiR7YmFzZV9kZXBlbmRlbmN5X2Rpcn0vZjUtY2xvdWQtbGlicy9zY3JpcHRzL29uYm9hcmQuanMiIC0taG9zdCAkaG9zdCAtLWxvZy1sZXZlbCAkbG9nX2xldmVsIFwKICAgIC0tb3V0cHV0ICIke2Jhc2VfbG9nX2Rpcn0vb25ib2FyZC5sb2ciIC0tc2lnbmFsIE9OQk9BUkRfRE9ORSAtLWhvc3RuYW1lICRob3N0bmFtZSAkb25ib2FyZF9hcmdzICY+PiAke2Jhc2VfbG9nX2Rpcn0vaW5zdGFsbC5sb2cKCiMgVE9ETzogUmFjZSBjb25kaXRpb24gYmV0d2VlbiBvbmJvYXJkL25ldHdvcmsgLSBVc2luZyBhdXRoIHRva2VuIHJlc3VsdHMgaW4gNDAzICJub3QgYXV0aG9yaXplZCIKIyBpZiBuZXR3b3JrIGNhbGwgaW1tZWRpYXRlbHkgZm9sbG93cyBvbmJvYXJkLiAgVXNlIGZvbGxvd2luZyBwbGFjZWhvbGRlciB1bnRpbCBmaXhlZCBpbiBmNS1jbG91ZC1saWJzCiMgYWRkaW5nIC0td2FpdC1mb3Igc2lnbmFsIGZvciBuZXR3b3JrIGNhbGwuCndhaXRfdGltZT0zMApsb2cgIldhaXRpbmc6ICR3YWl0X3RpbWUiCnNsZWVwICR3YWl0X3RpbWUKCiMjIE5ldHdvcmsKZWNobyAiQ29uZmlndXJpbmcgbmV0d29yay4uLiIKbmV0d29ya19hcmdzPSIiCmlmIFsgLW4gIiRkYXRhX2ludGVyZmFjZSIgXSA7IHRoZW4gbmV0d29ya19hcmdzKz0iLS1kZWZhdWx0LWd3ICQoZ2V0X25ldF9pbmZvICRkYXRhX2ludGVyZmFjZSBndykgIiA7IGZpCmlmIFsgLW4gIiR2bGFuIiBdIDsgdGhlbgogICAgZm9yIGkgaW4gJChlY2hvICR2bGFuIHwgdHIgIiRzZXBhcmF0b3IiICcgJykgOyBkbwogICAgICAgIG89JChqc29uaWZ5ICRpKQogICAgICAgIG5ldHdvcmtfYXJncys9Ii0tdmxhbiBuYW1lOiQoZ2V0X3ZhbCAiJG8iIG4pLG5pYzokKGdldF92YWwgIiRvIiBuaWMpICIKICAgIGRvbmUKZmkKaWYgWyAtbiAiJHNlbGZfaXAiIF0gOyB0aGVuCiAgICBmb3IgaSBpbiAkKGVjaG8gJHNlbGZfaXAgfCB0ciAiJHNlcGFyYXRvciIgJyAnKSA7IGRvCiAgICAgICAgbz0kKGpzb25pZnkgJGkpCiAgICAgICAgZ3c9JChnZXRfbmV0X2luZm8gJChnZXRfdmFsICIkbyIgaSkgZ3cgY2lkcikKICAgICAgICBuZXR3b3JrX2FyZ3MrPSItLXNlbGYtaXAgbmFtZTokKGdldF92YWwgIiRvIiBuKSxhZGRyZXNzOiQoZ2V0X3ZhbCAiJG8iIGEpLyR7Z3cjKi99LHZsYW46JChnZXRfdmFsICIkbyIgdikgIgogICAgZG9uZQpmaQppZiBbIC1uICIkZGlzY292ZXJ5X2FkZHJlc3MiIF0gOyB0aGVuCiAgICBuZXR3b3JrX2FyZ3MrPSItLWRpc2NvdmVyeS1hZGRyZXNzICR7ZGlzY292ZXJ5X2FkZHJlc3N9IgpmaQokTk9ERSAiJHtiYXNlX2RlcGVuZGVuY3lfZGlyfS9mNS1jbG91ZC1saWJzL3NjcmlwdHMvbmV0d29yay5qcyIgLS1ob3N0ICRob3N0IC0tbG9nLWxldmVsICRsb2dfbGV2ZWwgXAogICAgLS1vdXRwdXQgIiR7YmFzZV9sb2dfZGlyfS9uZXR3b3JrLmxvZyIgLS13YWl0LWZvciBPTkJPQVJEX0RPTkUgLS1zaWduYWwgTkVUV09SS19ET05FICRuZXR3b3JrX2FyZ3MgJj4+ICR7YmFzZV9sb2dfZGlyfS9pbnN0YWxsLmxvZwoKIyMgQ2x1c3RlcgppZiBbWyAtbiAiJG1hc3RlciIgJiYgLW4gIiRiaWdfaXFfZmFpbG92ZXJfcGVlcl9pcCIgXV0gOyB0aGVuCiAgICBlY2hvICJDb25maWd1cmluZyBjbHVzdGVyLi4uIgogICAgY2x1c3Rlcl9hcmdzPSItLWNsb3VkICRjbG91ZCAtLW1hc3RlciAtLWJpZy1pcS1mYWlsb3Zlci1wZWVyLWlwICRiaWdfaXFfZmFpbG92ZXJfcGVlcl9pcCIKICAgIGlmIFsgLW4gIiRwYXNzd29yZF9kYXRhX3VyaSIgXSA7IHRoZW4KICAgICAgICBjbHVzdGVyX2FyZ3MrPSIgLS1iaWctaXEtcGFzc3dvcmQtZGF0YS11cmkgJHBhc3N3b3JkX2RhdGFfdXJpICIKICAgIGZpCiAgICAkTk9ERSAiJHtiYXNlX2RlcGVuZGVuY3lfZGlyfS9mNS1jbG91ZC1saWJzL3NjcmlwdHMvY2x1c3Rlci5qcyIgLS1ob3N0ICRob3N0IC0tbG9nLWxldmVsICRsb2dfbGV2ZWwgXAogICAgICAgIC0tb3V0cHV0ICIke2Jhc2VfbG9nX2Rpcn0vY2x1c3Rlci5sb2ciIC0tdXNlciBhZG1pbiAkY2x1c3Rlcl9hcmdzICY+PiAke2Jhc2VfbG9nX2Rpcn0vaW5zdGFsbC5sb2cKZmkKCiMjIENyZWF0ZSBpQ2FsbCBzY3JpcHQgYW5kIGhhbmRsZXIgdG8gaGFuZGxlIGZhaWxvdmVyCmZhaWxvdmVyX3NjcmlwdF9sb2M9Ii9jb25maWcvY2xvdWQvYXdzL25vZGVfbW9kdWxlcy9AZjVkZXZjZW50cmFsL2Y1LWNsb3VkLWxpYnMtJHtjbG91ZH0vc2NyaXB0cy9mYWlsb3Zlci5qcyIKaWNhbGxfaGFuZGxlcl9uYW1lPSJGYWlsb3ZlckhhbmRsZXIiCmljYWxsX3NjcmlwdF9uYW1lPSJGYWlsb3ZlckNvbGxlY3RvciIKCmZhaWxvdmVyX2FyZ3M9Ii0tbG9nLWxldmVsICRsb2dfbGV2ZWwgLS1sb2ctZmlsZSAvdmFyL2xvZy9jbG91ZC8kY2xvdWQvZmFpbG92ZXIubG9nIC0tdGFnLWtleSBmNV9kZXBsb3ltZW50ICIKaWYgWyAtbiAiJHRhZ192YWx1ZSIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXRhZy12YWx1ZSAkdGFnX3ZhbHVlICIKZmkKCmlmIFsgLW4gIiR2aXBfYWxsb2NhdGlvbl9pZCIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXZpcC1hbGxvY2F0aW9uLWlkICR2aXBfYWxsb2NhdGlvbl9pZCAiCmZpCgppZiBbIC1uICIkcHJpdmF0ZV9pcCIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXByaXZhdGUtaXAgJHByaXZhdGVfaXAgIgpmaQoKaWYgWyAtbiAiJGFzc29jaWF0ZV9lbmkiIF0gOyB0aGVuCiAgICBmYWlsb3Zlcl9hcmdzKz0iLS1hc3NvY2lhdGUtZW5pICRhc3NvY2lhdGVfZW5pICIKZmkKCmlmIFsgLW4gIiRwYXNzd29yZF9kYXRhX3VyaSIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXBhc3N3b3JkLXVyaSAkcGFzc3dvcmRfZGF0YV91cmkiCmZpCiMjIE1ha2Ugc3VyZSB0aGUgc2Vjb25kYXJ5IHByaXZhdGUgSVAgYWRkcmVzcyBpcyBhIFNlbGYgSVAKdG1zaCBsaXN0IG5ldCBzZWxmIHwgZ3JlcCAkcHJpdmF0ZV9pcAppZiBbWyAkPyAhPSAwIF1dOyB0aGVuCiAgICB0bXNoIGNyZWF0ZSBuZXQgc2VsZiBsaWNfbWFuYWdlciB2bGFuIGludGVybmFsIGFsbG93LXNlcnZpY2UgZGVmYXVsdCBhZGRyZXNzICRwcml2YXRlX2lwLzMyCmVsc2UKICAgICJBcHBlYXJzICRwcml2YXRlX2lwIGlzIGFscmVhZHkgYSBTZWxmIElQIgpmaQoKIyMgRmlyc3QgY2hlY2sgaWYgaUNhbGwgYWxyZWFkeSBleGlzdHMKdG1zaCBsaXN0IHN5cyBpY2FsbCBoYW5kbGVyIHwgZ3JlcCAkaWNhbGxfaGFuZGxlcl9uYW1lCmlmIFtbICQ/ICE9IDAgXV07IHRoZW4KICAgIHRtc2ggY3JlYXRlIHN5cyBpY2FsbCBzY3JpcHQgJGljYWxsX3NjcmlwdF9uYW1lIGRlZmluaXRpb24geyBleGVjIG5vZGUgJGZhaWxvdmVyX3NjcmlwdF9sb2MgJGZhaWxvdmVyX2FyZ3MgfQogICAgdG1zaCBjcmVhdGUgc3lzIGljYWxsIGhhbmRsZXIgcGVyaW9kaWMgL0NvbW1vbi8kaWNhbGxfaGFuZGxlcl9uYW1lIHsgZmlyc3Qtb2NjdXJyZW5jZSBub3cgaW50ZXJ2YWwgNjAgc2NyaXB0IC9Db21tb24vJGljYWxsX3NjcmlwdF9uYW1lIH0KZWxzZQogICAgZWNobyAiQXBwZWFycyB0aGUgJGljYWxsX2hhbmRsZXJfbmFtZSBpY2FsbCBhbHJlYWR5IGV4aXN0cyEiCmZpCiMjIElmIGNyZWF0ZWQsIHJlbW92ZSBiaWdpcSB0bXAgcGFzc3dvcmQgZmlsZQppZiBbIC1uICIkYmlnaXFfcGFzc3dvcmQiIF0gOyB0aGVuCiAgICB0bXBfZmlsZT0nL21udC9jbG91ZFRtcC8uYmlnaXFfcGFzcycKICAgIHRtcF9kaXI9JChkaXJuYW1lICR0bXBfZmlsZSkKICAgIHdpcGVfdGVtcF9kaXIgJHRtcF9kaXIKICAgIGVjaG8gJ0RlbGV0aW5nIGJpZ2lxIHRlbXBvcmFyeSBwYXNzd29yZCBmaWxlLicKZmk=",
        "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n", 
        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
    }, 
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('mgmtPublicIPAddressName'), 0)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-0')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('mgmtPublicIPAddressName'), 1)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-1')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('intSelfPublicIpAddressNamePrefix'), '0')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('intSelfPublicIpAddressNamePrefix'), '1')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "condition": "[not(equals(variables('numberOfInternalIps'),0))]", 
            "copy": {
                "count": "[if(not(equals(variables('numberOfInternalIps'), 0)), variables('numberOfInternalIps'), 1)]", 
                "name": "intpipcopy"
            }, 
            "location": "[variables('location')]", 
            "name": "[concat(variables('intPublicIPAddressNamePrefix'), copyIndex())]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), copyIndex(0))]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('mgmtNsgID')]", 
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('mgmtNicName'), '0')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '0'))]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgId')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('mgmtNsgID')]", 
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('mgmtNicName'), '1')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '1'))]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgId')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('intNsgID')]", 
                "intpipcopy", 
                "[concat('Microsoft.Network/publicIPAddresses/', variables('intSelfPublicIpAddressNamePrefix'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('intNicName'), '0')]", 
            "properties": {
                "copy": [
                    {
                        "count": "[add(variables('numberOfInternalIps'), 1)]", 
                        "input": {
                            "name": "[if(equals(copyIndex('ipConfigurations'), 0), concat(variables('instanceName'), '-self-ipconfig'), concat(variables('resourceGroupName'), '-int-ipconfig', sub(copyIndex('ipConfigurations'), 1)))]", 
                            "properties": {
                                "PublicIpAddress": {
                                    "Id": "[if(equals(copyIndex('ipConfigurations'), 0), concat(variables('intSelfPublicIpAddressIdPrefix'), '0'), concat(variables('intPublicIPAddressIdPrefix'), sub(copyIndex('ipConfigurations'), 1)))]"
                                }, 
                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'True', 'False')]", 
                                "privateIPAddress": "[if(equals(copyIndex('ipConfigurations'), 0), variables('intSubnetPrivateAddress'), concat(variables('intSubnetPrivateAddressPrefix'), add(variables('intSubnetPrivateAddressSuffixInt'), sub(copyIndex('ipConfigurations'), 1))))]", 
                                "privateIPAllocationMethod": "Static", 
                                "subnet": {
                                    "id": "[variables('intSubnetId')]"
                                }
                            }
                        }, 
                        "name": "ipConfigurations"
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('intNsgId'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('intNsgID')]", 
                "intpipcopy", 
                "[concat('Microsoft.Network/publicIPAddresses/', variables('intSelfPublicIpAddressNamePrefix'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('intNicName'), '1')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[concat(variables('intSelfPublicIpAddressIdPrefix'), '1')]"
                            }, 
                            "primary": true, 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress1')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('intNsgId'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('bigIpMgmtPort')]", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "ssh_allow_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-int-nsg')]", 
            "properties": {
                "securityRules": []
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('availabilitySetName')]", 
            "properties": {
                "PlatformFaultDomainCount": 2, 
                "PlatformUpdateDomainCount": 2
            }, 
            "sku": {
                "name": "Aligned"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/availabilitySets"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "kind": "Storage", 
            "location": "[variables('location')]", 
            "name": "[variables('newDataStorageAccountName')]", 
            "properties": {
                "supportsHttpsTrafficOnly": true
            }, 
            "sku": {
                "name": "[variables('dataStorageAccountType')]", 
                "tier": "Standard"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]", 
            "location": "[variables('location')]", 
            "name": "[variables('newCustomImageName')]", 
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]", 
                        "osState": "Generalized", 
                        "osType": "Linux", 
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/images"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0')]", 
            "identity": { 
                "type": "SystemAssigned"
            }, 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": "[concat(take(variables('selfNicConfigArray')['0'], 3), take(variables('addtlNicConfigArray')['values0'], 0))]"
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPassword')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[json('null')]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1')]", 
            "identity": { 
                "type": "SystemAssigned"
            }, 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": "[concat(take(variables('selfNicConfigArray')['1'], 3), take(variables('addtlNicConfigArray')['values1'], 0))]"
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPassword')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[json('null')]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /var/log/cloud/azure; mkdir -p /config/cloud; echo ', variables('initScript'), ' | /usr/bin/base64 -d > /config/cloud/init.sh; chmod +x /config/cloud/init.sh;', ' /config/cloud/init.sh --cloud azure --log-level silly --data-interface eth1 --license ', parameters('bigIqLicenseKey1'), ' --ntp ', parameters('ntpServer'), ' --timezone ', parameters('timeZone'), ' --big-iq-password-data-uri file:///mnt/cloudTmp/.bigiq_pass --big-iq-password ', variables('adminPassword'), ' --big-iq-master-key ', parameters('masterKey'), ' --fcl-tag ', variables('f5CloudLibsTag'), ' --fcl-cloud-tag ', variables('f5CloudLibsAzureTag'), ' --vlan ', variables('singleQuote'), 'n:internal,nic:1.1', variables('singleQuote'), ' --self-ip ', variables('singleQuote'), 'n:internal_self,a:', variables('intSubnetPrivateAddress'), ',v:internal,i:eth1', variables('singleQuote'), ' --discovery-address ', variables('intSubnetPrivateAddress'), ' --usage-analytics ', variables('singleQuote'), 'send:', parameters('allowUsageAnalytics'), ',r:', variables('location'), ',cI:', variables('subscriptionID'), ',dI:', variables('deploymentId'), ',cN:aws,lT:byol,bIV:6.0.0,tN:f5-existing-stack-byol-2nic-bigiq,tV:4.3.0', variables('singleQuote'), ' &>> /var/log/cloud/azure/install.log &')]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /var/log/cloud/azure; mkdir -p /config/cloud; echo ', variables('initScript'), ' | /usr/bin/base64 -d > /config/cloud/init.sh; chmod +x /config/cloud/init.sh;', ' /config/cloud/init.sh --cloud azure --log-level silly --data-interface eth1 --license ', parameters('bigIqLicenseKey2'), ' --ntp ', parameters('ntpServer'), ' --timezone ', parameters('timeZone'), ' --create-license-pool ', parameters('licensePoolKeys'), ' --create-reg-key-pool ', parameters('regPoolKeys'), ' --big-iq-password-data-uri file:///mnt/cloudTmp/.bigiq_pass --big-iq-password ', variables('adminPassword'), ' --big-iq-master-key ', parameters('masterKey'), ' --master --big-iq-failover-peer-ip ', variables('intSubnetPrivateAddress'), ' --fcl-tag ', variables('f5CloudLibsTag'), ' --fcl-cloud-tag ', variables('f5CloudLibsAzureTag'), ' --vlan ', variables('singleQuote'), 'n:internal,nic:1.1', variables('singleQuote'), ' --self-ip ', variables('singleQuote'), 'n:internal_self,a:', variables('intSubnetPrivateAddress1'), ',v:internal,i:eth1', variables('singleQuote'), ' --discovery-address ', variables('intSubnetPrivateAddress1'), ' --usage-analytics ', variables('singleQuote'), 'send:', parameters('allowUsageAnalytics'), ',r:', variables('location'), ',cI:', variables('subscriptionID'), ',dI:', variables('deploymentId'), ',cN:aws,lT:byol,bIV:6.0.0,tN:f5-existing-stack-byol-2nic-bigiq,tV:4.3.0', variables('singleQuote'), ' &>> /var/log/cloud/azure/install.log &')]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl')]", 
                        "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "2017-09-01",
             "type": "Microsoft.Authorization/roleAssignments",
             "name": "[guid(concat(resourceGroup().id, variables('instanceName'), 0))]",
             "properties": {
                    "roleDefinitionId": "[variables(parameters('vmRoleName'))]",
                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', concat(variables('dnsLabel'), '-', variables('instanceName'), '0')), '2017-12-01', 'Full').identity.principalId]",
                    "scope": "[resourceGroup().id]"
              },
              "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '0')]"
                ]
        }, 
        {
            "apiVersion": "2017-09-01",
             "type": "Microsoft.Authorization/roleAssignments",
             "name": "[guid(concat(resourceGroup().id, variables('instanceName'), 1))]",
             "properties": {
                    "roleDefinitionId": "[variables(parameters('vmRoleName'))]",
                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', concat(variables('dnsLabel'), '-', variables('instanceName'), '1')), '2017-12-01', 'Full').identity.principalId]",
                    "scope": "[resourceGroup().id]"
              },
              "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '1')]"
                ]
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
            "value": "[concat('https://',reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort'))]"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "[concat(reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn,' ',22)]"
        }
    }
}